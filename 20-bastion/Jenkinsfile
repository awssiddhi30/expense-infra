pipeline{

    agent any
    options {
        timeout(time:30 , unit : 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    parameters {
        
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Pick something')
    }
    stages {
        stage('inti') {
            steps {
                script{
                     withAWS(region: 'us-east-1', credentials: 'aws-cred'){
                      sh """
                      cd 20-bastion
                      terraform init -reconfigure
                      terraform plan
                      """
                     }
               
                }
                
            }
        }
        stage('apply') {
            
            steps {
               script{
                     withAWS(region: 'us-east-1', credentials: 'aws-cred'){
                      sh """
                      cd 20-bastion
                      terraform apply -auto-approve
                      """
                     }
               }
            }
        }
       stage('trigger sg') {
         when {
                expression { params.ACTION == 'apply'}
            }
        steps{
             build job: '20-bastion', parameters: [string(name: 'ACTION', value: 'apply')], wait: false
 
        }
       }
        
    }  
    post {
        always{
            echo "This section runs always"
            deleteDir()
        }
        success{
            echo "This section run when pipeline success"
        }
        failure{
            echo "This section run when pipeline failure"
        }
    }
}










